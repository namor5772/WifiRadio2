Starting your Python script automatically on reboot of your Raspberry Pi—while ensuring that Wi-Fi is up and running—is a common requirement for various projects like home automation, IoT devices, or remote monitoring systems. Let's walk through a reliable method to achieve this using systemd, which allows you to manage services and their dependencies effectively.

Step 1: Prepare Your Python Script
First, ensure your Python script is working correctly and is executable.

Locate Your Script

Let's assume your script is located at:

bash
/home/pi/myscript.py
Make the Script Executable

Open a terminal and run:

bash
chmod +x /home/pi/myscript.py
Step 2: Create a Systemd Service File
systemd is a system and service manager for Linux operating systems. We can create a service file that tells systemd how to manage your script.

Create the Service File

In the terminal, run:

bash
sudo nano /etc/systemd/system/myscript.service
Add the Following Configuration

Paste the following content into the file:

ini
[Unit]
Description=My Python Script Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=pi
ExecStart=/usr/bin/python3 /home/pi/myscript.py
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
Explanation:

[Unit] Section:

Description: A brief description of your service.

After=network-online.target: Ensures the network is fully up before starting the service.

Wants=network-online.target: Expresses a dependency on the network being online.

[Service] Section:

Type=simple: The default setting for simple services.

User=pi: Runs the service as the pi user (adjust if necessary).

ExecStart: The command to execute your script.

Restart=on-failure: Restarts the service if it crashes.

RestartSec=10: Waits 10 seconds before attempting a restart.

[Install] Section:

WantedBy=multi-user.target: Starts the service during the normal system startup.

Save and Exit

Press Ctrl + O, then Enter to save the file.

Press Ctrl + X to exit the editor.

Step 3: Enable and Start the Service
Reload Systemd to Recognize the New Service

bash
sudo systemctl daemon-reload
Enable the Service at Boot

bash
sudo systemctl enable myscript.service
Start the Service Immediately (Optional)

bash
sudo systemctl start myscript.service
Check the Service Status

bash
sudo systemctl status myscript.service
This command will show whether the service is running and any error messages.

Step 4: Verify the Service Works on Reboot
Reboot Your Raspberry Pi

bash
sudo reboot
Check the Service After Reboot

After your Raspberry Pi restarts, open a terminal and run:

bash
sudo systemctl status myscript.service
Ensure the service is active and running without errors.

Ensuring Wi-Fi Is Up Before the Script Runs
The directives After=network-online.target and Wants=network-online.target in the service file help ensure that the network is fully operational before your script starts.

However, sometimes the network may not be ready even after these targets due to delays in Wi-Fi connections. Here's how you can handle this:

Option 1: Add a Delay Before Starting the Script
Modify the [Service] Section

Edit the service file:

bash
sudo nano /etc/systemd/system/myscript.service
Add ExecStartPre to Introduce a Sleep Delay

ini
[Service]
Type=simple
User=pi
ExecStartPre=/bin/sleep 15
ExecStart=/usr/bin/python3 /home/pi/myscript.py
Restart=on-failure
RestartSec=10
This adds a 15-second delay before the script starts, giving the Wi-Fi time to connect.

Save, Exit, and Reload Systemd

bash
sudo systemctl daemon-reload
Option 2: Implement Network Check in Your Script
Add logic to your Python script to check for an active network connection before proceeding.

python
import time
import socket

def is_connected():
    try:
        # Connect to the host -- tells us if the host is reachable
        socket.create_connection(("8.8.8.8", 53))
        return True
    except OSError:
        pass
    return False

# Wait until network is up
while not is_connected():
    print("Waiting for network...")
    time.sleep(5)

print("Network is up!")

# Rest of your script...
Alternative Method: Using Cron's @reboot
While systemd is the recommended method, you can also use Cron to run your script at boot.

Edit the Crontab for User pi

bash
crontab -e
Add the Following Line

bash
@reboot sleep 30 && /usr/bin/python3 /home/pi/myscript.py
This schedules your script to run at reboot after a 30-second delay.

Note: Cron does not guarantee that the network will be up, so incorporating a network check within your script is advisable.

Tips and Best Practices
Check the Absolute Paths
Ensure you're using the correct paths for:

Python interpreter: Use which python3 to confirm the path.

bash
which python3
Your script location.

Handle Exceptions in Your Script
Add exception handling to make your script robust, especially if it relies on network resources.

python
try:
    # Your network-dependent code here
except Exception as e:
    print(f"An error occurred: {e}")
Log Output for Troubleshooting
Modify your service file to redirect output to a log file.

ini
[Service]
Type=simple
User=pi
ExecStart=/usr/bin/python3 /home/pi/myscript.py >> /home/pi/myscript.log 2>&1
This captures both standard output and errors in myscript.log.

Testing and Troubleshooting
Check Service Status

bash
sudo systemctl status myscript.service
View Service Logs

bash
journalctl -u myscript.service
Check Your Script Logs (if logging to a file)

bash
cat /home/pi/myscript.log
Example: Full Service File with Logging and Delay
ini
[Unit]
Description=My Python Script Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=pi
ExecStartPre=/bin/sleep 15
ExecStart=/usr/bin/python3 /home/pi/myscript.py >> /home/pi/myscript.log 2>&1
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
Summary
Use systemd to manage your script as a service.

Ensure Wi-Fi is up by using network-online.target and possibly adding a delay with ExecStartPre=/bin/sleep 15.

Handle network availability within your script for added reliability.

Enable logging to troubleshoot any issues.

Test thoroughly by rebooting and verifying the script runs as expected.

Additional Considerations
Permissions: Ensure the pi user has the necessary permissions to execute the script and access any required resources.

Dependencies: If your script relies on certain network services or other applications, make sure they are also configured to start at boot.

Environment Variables: If your script depends on environment variables, you may need to set them in the service file using the Environment directive.

Feel Free to Ask More!
If you have any questions or need further assistance with setting this up, I'm here to help. Let's make sure your Raspberry Pi project runs smoothly on every reboot! ??

